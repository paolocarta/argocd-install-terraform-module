global:
  securityContext:
    fsGroup: 999
  nodeSelector:
    type: ${node_label}
  tolerations:
    - key: dedicated
      operator: Equal
      value: ${node_label}
  affinity:
    podAntiAffinity: hard

configs:
  cm:
    url: "https://${hostname}"
    # Argo CD instance label key
    application.instanceLabelKey: argocd.argoproj.io/instance
    kustomize.buildOptions: "--enable-alpha-plugins"
    helm.valuesFileSchemes: "http, https, secrets"
  credentialTemplates:
    gitlab-creds:
      url: "${git_url}"
      gitlab-ssh-key: "${gitlab_ssh_private_key}"
  params:
    ## Controller Properties
    # -- Number of application status processors
    controller.status.processors: 20
    # -- Number of application operation processors
    controller.operation.processors: 10
    # -- Specifies timeout between application self heal attempts
    controller.self.heal.timeout.seconds: 5
    # -- Repo server RPC call timeout seconds.
    controller.repo.server.timeout.seconds: 500
    application.namespaces: "*"
    server.insecure: "true"
  rbac:
    policy.default: role:readonly
    policy.csv: |
      g, /devops, role:admin
  repositories:
    deployments:
      url: "${git_repo_url}"
  secret:
    argocdServerAdminPassword: "${secret_argocd_admin_password}"

  ssh:
    extraHosts: |
        gitlab.internal.mycompanycom ecdsa-sha2-nistp256 sdasd

## Controller
controller:
  # If changing the number of replicas you must pass the number as ARGOCD_CONTROLLER_REPLICAS as an environment variable
  replicas: 2

  env:
    - name: "ARGOCD_GPG_ENABLED"
      value: "false"

  ## Argo controller commandline flags
  # args:
  #   statusProcessors: "20"
  #   operationProcessors: "10"
  #   appResyncPeriod: "180"

  ## Argo controller log format: text|json
  logFormat: json
  ## Argo controller log level
  # logLevel: info

  resources:
   limits:
     memory: 2.5Gi
   requests:
     cpu: 400m
     memory: 2Gi

  ## Server metrics controller configuration
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      # namespace: monitoring
    rules:
      enabled: false
      spec: []

  ## Enable Admin ClusterRole resources.
  ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.
  clusterAdminAccess:
    enabled: true

## Dex
dex:
  enabled: false

## Redis
redis:
  resources:
   limits:
     memory: 128Mi
   requests:
     cpu: 100m
     memory: 64Mi

# This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
# the custom redis deployment is omitted
redis-ha:
  enabled: false

## Server
server:
  replicas: 2

  env:
    - name: "ARGOCD_GPG_ENABLED"
      value: "false"

  autoscaling:
    enabled: false

  ## Argo server log format: text|json
  logFormat: json
  ## Argo server log level
  logLevel: info

  resources:
   limits:
     memory: 1Gi
   requests:
     cpu: 200m
     memory: 128Mi

  ## Certificate configuration
  certificate:
    enabled: false

  ## Server metrics service configuration
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
    #   selector:
    #     prometheus: kube-prometheus
    #   namespace: monitoring
    #   additionalLabels: {}

  extraArgs:
    - --insecure

  ingress:
    enabled: true
    ingressClassName: ${ingress_class_name}
    annotations:
      kubernetes.io/tls-acme: 'true'
    hostname: ${hostname}
    tls: true
    # https: true

  ## Enable Admin ClusterRole resources.
  ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.
  clusterAdminAccess:
    enabled: true

## Repo Server
repoServer:
  replicas: 2

  ## Argo repoServer log format: text|json
  logFormat: json
  ## Argo repoServer log level
  logLevel: info

  resources:
    limits:
      memory: 1536Mi
    requests:
      cpu: 200m
      memory: 512Mi

  serviceAccount:
    create: true
    automountServiceAccountToken: true
    name: "argocd-repo-server"
    # name: "${argocd_serviceaccount}"
    # If you want to use AWS IRSA for accessing an internal hosted repo
    # annotations:
    #   eks.amazonaws.com/role-arn: "${argocd_iam_role_arn}"

  rbac:
    - apiGroups:
      - argoproj.io
      resources:
      - applications
      verbs:
      - get
      - list
      - watch

  # REF:
  # - https://github.com/viaduct-ai/kustomize-sops#argo-cd-helm-chart-with-custom-tooling
  # 
  # Use init containers to configure custom tooling
  # https://argoproj.github.io/argo-cd/operator-manual/custom_tools/

  env:
    - name: "ARGOCD_GPG_ENABLED"
      value: "false"
    - name: "ARGOCD_EXEC_TIMEOUT"
      value: "5m"
    - name: "KUSTOMIZE_PLUGIN_HOME"
      value: "/custom-tools/kustomize-plugins"
    - name: HELM_PLUGINS
      value: /custom-tools/helm-plugins/
    - name: HELM_SECRETS_BACKEND
      value: sops
    # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
    - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
      value: "false"
    - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
      value: "true"
    - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
      value: "false"
    - name: HELM_SECRETS_WRAPPER_ENABLED
      value: "true"
    - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
      value: "true"
    - name: HELM_SECRETS_HELM_PATH
      value: /usr/local/bin/helm

  volumes:
    - name: custom-tools
      emptyDir: {}

  initContainers:
    - name: install-ksops
      image: viaductoss/ksops:v4.2.3
      command: ["/bin/sh", "-c"]
      args:
        - echo "Installing KSOPS...";
          mv ksops /custom-tools/;
          mv kustomize /custom-tools/;
          mkdir -p /custom-tools/kustomize-plugins/viaduct.ai/v1/ksops;
          ln -s /custom-tools/ksops /custom-tools/kustomize-plugins/viaduct.ai/v1/ksops/ksops;
          echo "Done.";
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
    # let's evaluate an image with tools inside and copy them in /custom-tools
    # https://github.com/jkroepke/helm-secrets/blob/main/Dockerfile
    - name: download-helm-secrets-tools
      image: alpine:latest
      imagePullPolicy: IfNotPresent
      command: [sh, -ec]
      env:
        - name: HELM_SECRETS_VERSION
          value: "4.6.1"
        - name: KUBECTL_VERSION
          value: "1.30.4"
        - name: VALS_VERSION
          value: "0.37.5"
        - name: SOPS_VERSION
          value: "3.9.0"
      args:
        - |
          mkdir -p /custom-tools/helm-plugins

          GO_ARCH=$(uname -m | sed -e 's/x86_64/amd64/')
          wget -qO /custom-tools/curl https://github.com/moparisthebest/static-curl/releases/latest/download/curl-$${GO_ARCH}

          GO_ARCH=$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/') && \
          wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v$${KUBECTL_VERSION}/bin/linux/$${GO_ARCH}/kubectl
          wget -qO /custom-tools/sops https://github.com/getsops/sops/releases/download/v$${SOPS_VERSION}/sops-v$${SOPS_VERSION}.linux.$${GO_ARCH}
          wget -qO- https://github.com/helmfile/vals/releases/download/v$${VALS_VERSION}/vals_$${VALS_VERSION}_linux_$${GO_ARCH}.tar.gz | tar zxv -C /custom-tools vals
          wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v$${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-

          chmod +x /custom-tools/*
          cp /custom-tools/helm-plugins/helm-secrets/scripts/wrapper/helm.sh /custom-tools/helm
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  volumeMounts:
    - mountPath: /usr/local/bin/kustomize
      name: custom-tools
      subPath: kustomize
    - mountPath: /usr/local/bin/ksops
      name: custom-tools
      subPath: ksops
    # helm-secrets
    - mountPath: /custom-tools
      name: custom-tools
    - mountPath: /usr/local/sbin/helm
      name: custom-tools
      subPath: helm
    - mountPath: /usr/local/bin/sops
      name: custom-tools
      subPath: sops
    - mountPath: /usr/local/bin/kubectl
      name: custom-tools
      subPath: kubectl
    - mountPath: /usr/local/bin/vals
      name: custom-tools
      subPath: vals
    - mountPath: /usr/local/bin/curl
      name: custom-tools
      subPath: curl

notifications:
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

applicationSet:
  replicas: 2
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 512Mi

redisSecretInit:
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi